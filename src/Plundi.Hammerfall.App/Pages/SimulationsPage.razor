@page "/simulations"

<SelectAbilityModal @ref="_selectAbilityModal"
                    OnAbilitySelected="OnAbilitySelected"/>

<main class="overflow-auto grow" tabindex="-1">
    <div class="flex flex-col gap-y-6 p-4 mx-auto max-w-screen-2xl lg:px-6">
        <div class="flex flex-col gap-2">
            <span class="text-lg">
                Configuration
            </span>
            <div class="grid gap-2 items-center md:gap-4 md:grid-cols-[auto,1fr]">
                <span class="text-sm">Your level</span>
                <div class="grid grid-cols-10 shadow">
                    @for (var i = 1; i <= 10; i++)
                    {
                        var characterLevel = i;
                        <button type="button"
                                class="@(_characterLevel == characterLevel ? "from-violet-600 to-violet-500 hover:from-violet-500 hover:to-violet-400 focus:outline-violet-600" : "from-gray-900 to-gray-900 hover:from-gray-800 hover:to-gray-800 focus:outline-gray-600") p-1 font-mono text-sm font-semibold bg-gradient-to-r border-l first:rounded-l last:rounded-r last:border-r focus:z-10 border-y border-gray-950 focus:outline focus:outline-2 focus:outline-offset-2"
                                @onclick="() => { _characterLevel = characterLevel; _isSimulationOutdated = true;}">
                            @characterLevel
                        </button>
                    }
                </div>
                <span class="mt-2 text-sm md:mt-0">Use melee during downtime?</span>
                <div class="grid grid-cols-2 shadow grow">
                    <button
                        class="@(_useMeleeDuringDowntime ? "from-gray-900 to-gray-900 hover:from-gray-800 hover:to-gray-800 focus:outline-gray-600" : "from-violet-600 to-violet-500 hover:from-violet-500 hover:to-violet-400 focus:outline-violet-600") py-1 px-2 text-sm font-semibold bg-gradient-to-r rounded-l border-l focus:z-10 border-y border-gray-950 truncate focus:outline focus:outline-2 focus:outline-offset-2"
                        @onclick="() => { _useMeleeDuringDowntime = false; _isSimulationOutdated = true; }">
                        No
                    </button>
                    <button
                        class="@(_useMeleeDuringDowntime ? "from-violet-600 to-violet-500 hover:from-violet-500 hover:to-violet-400 focus:outline-violet-600" : "from-gray-900 to-gray-900 hover:from-gray-800 hover:to-gray-800 focus:outline-gray-600") py-1 px-2 text-sm font-semibold bg-gradient-to-r from-gray-900 to-gray-900 rounded-r border hover:from-gray-800 hover:to-gray-800 focus:z-10 border-y border-gray-950 truncate focus:outline focus:outline-2 focus:outline-offset-2 focus:outline-gray-600"
                        @onclick="() => {_useMeleeDuringDowntime = true; _isSimulationOutdated = true; }">
                        Yes
                    </button>
                </div>

                @foreach (var setting in _abilitySettings)
                {
                    var detailsProvider = AbilityServiceProvider.GetAbilityDetailsProvider(setting.AbilityName);

                    <span class="flex gap-2 items-center mt-2 text-sm md:mt-0"><img src="img/abilities/@(detailsProvider.GetImagePath(setting.AbilityName))" class="w-6 h-6 rounded border-gray-950"/> @setting.Description</span>
                    <div class="grid grid-cols-@setting.PossibleValues.Count shadow grow">
                        @foreach (var possibleValue in setting.PossibleValues)
                        {
                            <button
                                class="@(possibleValue == setting.Value ? "from-violet-600 to-violet-500 hover:from-violet-500 hover:to-violet-400 focus:outline-violet-600" : "from-gray-900 to-gray-900 hover:from-gray-800 hover:to-gray-800 focus:outline-gray-600") py-1 px-2 text-sm font-semibold bg-gradient-to-r border-l first:rounded-l last:rounded-r last:border-r focus:z-10 border-y border-gray-950 truncate focus:outline focus:outline-2 focus:outline-offset-2"
                                @onclick="() => {setting.Value = possibleValue; _isSimulationOutdated = true; }">
                                @possibleValue
                            </button>
                        }
                    </div>
                }
            </div>
        </div>
        <div class="flex flex-col items-center bg-gray-900 rounded border shadow border-gray-950">
            <div class="grid grid-cols-2 gap-x-4 gap-y-6 p-4 max-w-2xl sm:grid-cols-5">
                <div class="flex flex-col gap-2 items-center">
                    <span class="text-sm text-center">Offensive 1</span>
                    @if (_primaryOffensiveAbilityName is not null)
                    {
                        <div class="w-14 h-14 bg-clip-border bg-cover rounded border shadow cursor-pointer border-gray-950"
                             style="background-image: url('img/abilities/@AbilityServiceProvider.GetAbilityDetailsProvider(_primaryOffensiveAbilityName).GetImagePath(_primaryOffensiveAbilityName)')">
                            <button class="p-2 w-full h-full text-xs text-center text-white bg-gray-900 rounded opacity-0 outline-white hover:opacity-50 focus:opacity-50 outline outline-1"
                                    @onclick="() => { _primaryOffensiveAbilityName = null; _isSimulationOutdated = true; }">
                                <i class="fa-solid fa-x"></i>
                            </button>
                        </div>
                    }
                    else
                    {
                        <button class="p-2 w-14 h-14 text-center text-gray-400 rounded border-2 border-gray-400 border-dashed hover:bg-gray-800 focus:bg-gray-800 focus:outline-none"
                                @onclick="() => { _selectAbilityModalOpenedFor = nameof(_primaryOffensiveAbilityName); var hiddenAbilities = _secondaryOffensiveAbilityName is not null ? new List<string> { _secondaryOffensiveAbilityName } : []; _selectAbilityModal!.Open(hiddenAbilities, showUtilityAbilities: false); }">
                            <i class="fa-solid fa-plus"></i>
                        </button>
                    }
                    <div class="flex">
                        <button
                            class="@(_primaryOffensiveAbilityRarity == AbilityRarity.Common ? "from-gray-400 to-gray-500 hover:from-gray-300 hover:to-gray-400 focus:outline-gray-600 text-black font-bold" : "from-gray-950 to-gray-950 hover:from-gray-800 hover:to-gray-800 focus:outline-gray-600") p-1 text-xs bg-gradient-to-r rounded-l border-y border-l focus:z-10 border-gray-950 focus:outline focus:outline-2 focus:outline-offset-2"
                            @onclick="() => _primaryOffensiveAbilityRarity = AbilityRarity.Common">
                            C
                        </button>
                        <button
                            class="@(_primaryOffensiveAbilityRarity == AbilityRarity.Uncommon ? "from-emerald-500 to-emerald-600 hover:from-emerald-400 hover:to-emerald-500 focus:outline-emerald-600 text-black font-bold" : "text-emerald-400 from-gray-950 to-gray-950 hover:from-gray-800 hover:to-gray-800 focus:outline-gray-600") p-1 text-xs bg-gradient-to-r border-l border-y focus:z-10 border-gray-950 focus:outline focus:outline-2 focus:outline-offset-2"
                            @onclick="() => _primaryOffensiveAbilityRarity = AbilityRarity.Uncommon">
                            U
                        </button>
                        <button
                            class="@(_primaryOffensiveAbilityRarity == AbilityRarity.Rare ? "from-sky-500 to-sky-600 hover:from-sky-40 hover:to-sky-500 focus:outline-sky-600 text-black font-bold" : "text-sky-400 from-gray-950 to-gray-950 hover:from-gray-800 hover:to-gray-800 focus:outline-gray-600") p-1 text-xs bg-gradient-to-r border-l border-y focus:z-10 border-gray-950 focus:outline focus:outline-2 focus:outline-offset-2"
                            @onclick="() => _primaryOffensiveAbilityRarity = AbilityRarity.Rare">
                            R
                        </button>
                        <button
                            class="@(_primaryOffensiveAbilityRarity == AbilityRarity.Epic ? "from-purple-500 to-purple-600 hover:from-purple-400 hover:to-purple-500 focus:outline-purple-600 text-black font-bold" : "text-purple-400 from-gray-950 to-gray-950 hover:from-gray-800 hover:to-gray-800 focus:outline-gray-600") p-1 text-xs bg-gradient-to-r border border rounded-r focus:z-10 border-gray-950 focus:outline focus:outline-2 focus:outline-offset-2"
                            @onclick="() => _primaryOffensiveAbilityRarity = AbilityRarity.Epic">
                            E
                        </button>
                    </div>
                </div>
                <div class="flex flex-col gap-2 items-center">
                    <span class="text-sm">Offensive 2</span>
                    @if (_secondaryOffensiveAbilityName is not null)
                    {
                        <div class="w-14 h-14 bg-clip-border bg-cover rounded border shadow cursor-pointer border-gray-950"
                             style="background-image: url('img/abilities/@AbilityServiceProvider.GetAbilityDetailsProvider(_secondaryOffensiveAbilityName).GetImagePath(_secondaryOffensiveAbilityName)')">
                            <button class="p-2 w-full h-full text-xs text-center text-white bg-gray-900 rounded opacity-0 outline-white hover:opacity-50 focus:opacity-50 outline outline-1"
                                    @onclick="() => { _secondaryOffensiveAbilityName = null; _isSimulationOutdated = true; }">
                                <i class="fa-solid fa-x"></i>
                            </button>
                        </div>
                    }
                    else
                    {
                        <button class="p-2 w-14 h-14 text-center text-gray-400 rounded border-2 border-gray-400 border-dashed hover:bg-gray-800 focus:bg-gray-800 focus:outline-none"
                                @onclick="() => { _selectAbilityModalOpenedFor = nameof(_secondaryOffensiveAbilityName); var hiddenAbilities = _primaryOffensiveAbilityName is not null ? new List<string> { _primaryOffensiveAbilityName } : []; _selectAbilityModal!.Open(hiddenAbilities, showUtilityAbilities: false); }">
                            <i class="fa-solid fa-plus"></i>
                        </button>
                    }
                    <div class="flex">
                        <button
                            class="@(_secondaryOffensiveAbilityRarity == AbilityRarity.Common ? "from-gray-400 to-gray-500 hover:from-gray-300 hover:to-gray-400 focus:outline-gray-600 text-black font-bold" : "from-gray-950 to-gray-950 hover:from-gray-800 hover:to-gray-800 focus:outline-gray-600") p-1 text-xs bg-gradient-to-r rounded-l border-y border-l focus:z-10 border-gray-950 focus:outline focus:outline-2 focus:outline-offset-2"
                            @onclick="() => _secondaryOffensiveAbilityRarity = AbilityRarity.Common">
                            C
                        </button>
                        <button
                            class="@(_secondaryOffensiveAbilityRarity == AbilityRarity.Uncommon ? "from-emerald-500 to-emerald-600 hover:from-emerald-400 hover:to-emerald-500 focus:outline-emerald-600 text-black font-bold" : "text-emerald-400 from-gray-950 to-gray-950 hover:from-gray-800 hover:to-gray-800 focus:outline-gray-600") p-1 text-xs bg-gradient-to-r border-l border-y focus:z-10 border-gray-950 focus:outline focus:outline-2 focus:outline-offset-2"
                            @onclick="() => _secondaryOffensiveAbilityRarity = AbilityRarity.Uncommon">
                            U
                        </button>
                        <button
                            class="@(_secondaryOffensiveAbilityRarity == AbilityRarity.Rare ? "from-sky-500 to-sky-600 hover:from-sky-40 hover:to-sky-500 focus:outline-sky-600 text-black font-bold" : "text-sky-400 from-gray-950 to-gray-950 hover:from-gray-800 hover:to-gray-800 focus:outline-gray-600") p-1 text-xs bg-gradient-to-r border-l border-y focus:z-10 border-gray-950 focus:outline focus:outline-2 focus:outline-offset-2"
                            @onclick="() => _secondaryOffensiveAbilityRarity = AbilityRarity.Rare">
                            R
                        </button>
                        <button
                            class="@(_secondaryOffensiveAbilityRarity == AbilityRarity.Epic ? "from-purple-500 to-purple-600 hover:from-purple-400 hover:to-purple-500 focus:outline-purple-600 text-black font-bold" : "text-purple-400 from-gray-950 to-gray-950 hover:from-gray-800 hover:to-gray-800 focus:outline-gray-600") p-1 text-xs bg-gradient-to-r border border rounded-r focus:z-10 border-gray-950 focus:outline focus:outline-2 focus:outline-offset-2"
                            @onclick="() => _secondaryOffensiveAbilityRarity = AbilityRarity.Epic">
                            E
                        </button>
                    </div>
                </div>
                <div class="hidden mx-4 mx-auto w-px sm:block bg-gray-950"></div>
                <div class="flex flex-col gap-2 items-center">
                    <span class="text-sm">Utility 1</span>
                    @if (_primaryUtilityAbilityName is not null)
                    {
                        <div class="w-14 h-14 bg-clip-border bg-cover rounded border shadow cursor-pointer border-gray-950"
                             style="background-image: url('img/abilities/@AbilityServiceProvider.GetAbilityDetailsProvider(_primaryUtilityAbilityName).GetImagePath(_primaryUtilityAbilityName)')">
                            <button class="p-2 w-full h-full text-xs text-center text-white bg-gray-900 rounded opacity-0 outline-white hover:opacity-50 focus:opacity-50 outline outline-1"
                                    @onclick="() => { _primaryUtilityAbilityName = null; _isSimulationOutdated = true; }">
                                <i class="fa-solid fa-x"></i>
                            </button>
                        </div>
                    }
                    else
                    {
                        <button class="p-2 w-14 h-14 text-center text-gray-400 rounded border-2 border-gray-400 border-dashed hover:bg-gray-800 focus:bg-gray-800 focus:outline-none"
                                @onclick="() => { _selectAbilityModalOpenedFor = nameof(_primaryUtilityAbilityName); var hiddenAbilities = _secondaryUtilityAbilityName is not null ? new List<string> { _secondaryUtilityAbilityName } : []; _selectAbilityModal!.Open(hiddenAbilities, showOffensiveAbilities: false); }">
                            <i class="fa-solid fa-plus"></i>
                        </button>
                    }
                    <div class="flex">
                        <button
                            class="@(_primaryUtilityAbilityRarity == AbilityRarity.Common ? "from-gray-400 to-gray-500 hover:from-gray-300 hover:to-gray-400 focus:outline-gray-600 text-black font-bold" : "from-gray-950 to-gray-950 hover:from-gray-800 hover:to-gray-800 focus:outline-gray-600") p-1 text-xs bg-gradient-to-r rounded-l border-y border-l focus:z-10 border-gray-950 focus:outline focus:outline-2 focus:outline-offset-2"
                            @onclick="() => _primaryUtilityAbilityRarity = AbilityRarity.Common">
                            C
                        </button>
                        <button
                            class="@(_primaryUtilityAbilityRarity == AbilityRarity.Uncommon ? "from-emerald-500 to-emerald-600 hover:from-emerald-400 hover:to-emerald-500 focus:outline-emerald-600 text-black font-bold" : "text-emerald-400 from-gray-950 to-gray-950 hover:from-gray-800 hover:to-gray-800 focus:outline-gray-600") p-1 text-xs bg-gradient-to-r border-l border-y focus:z-10 border-gray-950 focus:outline focus:outline-2 focus:outline-offset-2"
                            @onclick="() => _primaryUtilityAbilityRarity = AbilityRarity.Uncommon">
                            U
                        </button>
                        <button
                            class="@(_primaryUtilityAbilityRarity == AbilityRarity.Rare ? "from-sky-500 to-sky-600 hover:from-sky-40 hover:to-sky-500 focus:outline-sky-600 text-black font-bold" : "text-sky-400 from-gray-950 to-gray-950 hover:from-gray-800 hover:to-gray-800 focus:outline-gray-600") p-1 text-xs bg-gradient-to-r border-l border-y focus:z-10 border-gray-950 focus:outline focus:outline-2 focus:outline-offset-2"
                            @onclick="() => _primaryUtilityAbilityRarity = AbilityRarity.Rare">
                            R
                        </button>
                        <button
                            class="@(_primaryUtilityAbilityRarity == AbilityRarity.Epic ? "from-purple-500 to-purple-600 hover:from-purple-400 hover:to-purple-500 focus:outline-purple-600 text-black font-bold" : "text-purple-400 from-gray-950 to-gray-950 hover:from-gray-800 hover:to-gray-800 focus:outline-gray-600") p-1 text-xs bg-gradient-to-r border border rounded-r focus:z-10 border-gray-950 focus:outline focus:outline-2 focus:outline-offset-2"
                            @onclick="() => _primaryUtilityAbilityRarity = AbilityRarity.Epic">
                            E
                        </button>
                    </div>
                </div>
                <div class="flex flex-col gap-2 items-center">
                    <span class="text-sm">Utility 2</span>
                    @if (_secondaryUtilityAbilityName is not null)
                    {
                        <div class="w-14 h-14 bg-clip-border bg-cover rounded border shadow cursor-pointer border-gray-950"
                             style="background-image: url('img/abilities/@AbilityServiceProvider.GetAbilityDetailsProvider(_secondaryUtilityAbilityName).GetImagePath(_secondaryUtilityAbilityName)')">
                            <button class="p-2 w-full h-full text-xs text-center text-white bg-gray-900 rounded opacity-0 outline-white hover:opacity-50 focus:opacity-50 outline outline-1"
                                    @onclick="() => { _secondaryUtilityAbilityName = null; _isSimulationOutdated = true; }">
                                <i class="fa-solid fa-x"></i>
                            </button>
                        </div>
                    }
                    else
                    {
                        <button class="p-2 w-14 h-14 text-center text-gray-400 rounded border-2 border-gray-400 border-dashed hover:bg-gray-800 focus:bg-gray-800 focus:outline-none"
                                @onclick="() => { _selectAbilityModalOpenedFor = nameof(_secondaryUtilityAbilityName); var hiddenAbilities = _primaryUtilityAbilityName is not null ? new List<string> { _primaryUtilityAbilityName } : []; _selectAbilityModal!.Open(hiddenAbilities, showOffensiveAbilities: false); }">
                            <i class="fa-solid fa-plus"></i>
                        </button>
                    }
                    <div class="flex">
                        <button
                            class="@(_secondaryUtilityAbilityRarity == AbilityRarity.Common ? "from-gray-400 to-gray-500 hover:from-gray-300 hover:to-gray-400 focus:outline-gray-600 text-black font-bold" : "from-gray-950 to-gray-950 hover:from-gray-800 hover:to-gray-800 focus:outline-gray-600") p-1 text-xs bg-gradient-to-r rounded-l border-y border-l focus:z-10 border-gray-950 focus:outline focus:outline-2 focus:outline-offset-2"
                            @onclick="() => _secondaryUtilityAbilityRarity = AbilityRarity.Common">
                            C
                        </button>
                        <button
                            class="@(_secondaryUtilityAbilityRarity == AbilityRarity.Uncommon ? "from-emerald-500 to-emerald-600 hover:from-emerald-400 hover:to-emerald-500 focus:outline-emerald-600 text-black font-bold" : "text-emerald-400 from-gray-950 to-gray-950 hover:from-gray-800 hover:to-gray-800 focus:outline-gray-600") p-1 text-xs bg-gradient-to-r border-l border-y focus:z-10 border-gray-950 focus:outline focus:outline-2 focus:outline-offset-2"
                            @onclick="() => _secondaryUtilityAbilityRarity = AbilityRarity.Uncommon">
                            U
                        </button>
                        <button
                            class="@(_secondaryUtilityAbilityRarity == AbilityRarity.Rare ? "from-sky-500 to-sky-600 hover:from-sky-40 hover:to-sky-500 focus:outline-sky-600 text-black font-bold" : "text-sky-400 from-gray-950 to-gray-950 hover:from-gray-800 hover:to-gray-800 focus:outline-gray-600") p-1 text-xs bg-gradient-to-r border-l border-y focus:z-10 border-gray-950 focus:outline focus:outline-2 focus:outline-offset-2"
                            @onclick="() => _secondaryUtilityAbilityRarity = AbilityRarity.Rare">
                            R
                        </button>
                        <button
                            class="@(_secondaryUtilityAbilityRarity == AbilityRarity.Epic ? "from-purple-500 to-purple-600 hover:from-purple-400 hover:to-purple-500 focus:outline-purple-600 text-black font-bold" : "text-purple-400 from-gray-950 to-gray-950 hover:from-gray-800 hover:to-gray-800 focus:outline-gray-600") p-1 text-xs bg-gradient-to-r border border rounded-r focus:z-10 border-gray-950 focus:outline focus:outline-2 focus:outline-offset-2"
                            @onclick="() => _secondaryUtilityAbilityRarity = AbilityRarity.Epic">
                            E
                        </button>
                    </div>
                </div>
            </div>
        </div>
        <button class="py-1 px-2 text-sm font-semibold bg-gradient-to-r from-gray-900 to-gray-900 rounded border hover:from-gray-800 hover:to-gray-800 border-gray-950 truncate focus:outline-gray-600 focus:outline focus:outline-2 focus:outline-offset-2"
                @onclick="SimulateAsync">
            Simulate
        </button>
        @if (_simulationReport is not null)
        {
            <div class="flex flex-col gap-2 @(_isSimulationOutdated ? "opacity-50" : "")">
                <div class="flex flex-col gap-2 justify-center items-center p-4 bg-gray-900 rounded border shadow md:p-6 border-gray-950">
                    <span class="font-mono text-4xl">@((_simulationReport.TotalDamage / _simulationReport.SimulationDuration).ToString("N1")) dps</span>
                    <span class="text-xs text-gray-400">based on 1min of simulation</span>
                </div>
                <SimulatedDamageDoneChart @ref="_simulatedDamageDoneChart"/>
                <div class="flex flex-col gap-2 justify-center p-4 bg-gray-900 rounded border shadow md:p-6 border-gray-950">
                    @foreach (var @event in _simulationReport.Events)
                    {
                        var abilityDetailsProvider = AbilityServiceProvider.GetAbilityDetailsProvider(@event.AbilityName);

                        <div class="flex gap-2 items-center">
                            <span class="font-mono text-sm text-gray-400 min-w-16 text-end">@(@event.Timestamp)s</span>
                            <img src="img/abilities/@(abilityDetailsProvider.GetImagePath(@event.AbilityName))" class="w-6 h-6 rounded border-gray-950"/>
                            <span class="text-sm">@(@event.Event.ToLower())</span>
                            @if (@event.Damage > 0)
                            {
                                <span class="text-sm text-gray-400">for</span>
                                <span class="text-sm text-red-400"><span class="font-mono">@(@event.Damage.ToString("N1"))</span> damage</span>
                            }
                        </div>
                    }
                </div>
            </div>
        }
        else
        {
            <span class="self-center my-6 text-sm text-gray-400">Run the simulation to see results...</span>
        }
    </div>
    <SiteInformationDisplay/>
</main>
