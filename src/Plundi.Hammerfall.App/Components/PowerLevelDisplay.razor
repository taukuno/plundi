<div class="flex flex-col items-stretch p-4 bg-gray-900 rounded border shadow border-gray-950">
    <span class="text-center">Power Level</span>
    <span class="text-xs text-center text-gray-400">
        combination of hit points & attack power advantage<br/>
    </span>
    <span class="font-mono text-xs text-center text-gray-400">
        (your health / target health) * (your attack power / target attack power)
        </span>
    <div class="flex overflow-auto" tabindex="-1">
        <table class="gap-2 mt-4 text-xs text-center md:text-base grow">
            <thead class="focus:outline-2">
            <th class="p-1 text-sm text-nowrap">Your Level</th>
            @for (var level = 1; level <= 10; level++)
            {
                <th class="p-1 text-sm whitespace-nowrap text-nowrap">vs. L@(level)</th>
            }
            </thead>
            <tbody class="mt-2">
            @for (var playerLevel = 1; playerLevel <= 10; playerLevel++)
            {
                <tr class="@(playerLevel % 2 == 1 ? "bg-gray-950" : "")">
                    <td class="p-1 text-sm text-nowrap">Level @(playerLevel)</td>
                    @for (var targetLevel = 1; targetLevel <= 10; targetLevel++)
                    {
                        var isSelection = playerLevel == PlayerLevel && targetLevel == TargetLevel;
                        var powerDifference = PlayerStatsProvider.CalculatePowerDifference(playerLevel, targetLevel);

                        <td class="p-1 text-sm text-nowrap @(powerDifference > 1 ? "text-green-500" : powerDifference < 1 ? "text-red-500" : "") @(isSelection ? "bg-gradient-to-r from-violet-800 to-violet-700 rounded" : "")">
                            x@(powerDifference.ToString("N2"))
                        </td>
                    }
                </tr>
            }
            </tbody>
        </table>
    </div>
</div>
